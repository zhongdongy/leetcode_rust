var searchIndex = JSON.parse('{\
"leetcode_rust":{"doc":"LeetCode Solutions in Rust","t":[0,0,0,3,11,11,11,12,11,11,11,11,12,11,11,11,12,0,0,0,0,5,4,13,13,11,11,11,11,11,11,11,5,5,0,0,0,0,5,4,13,13,11,11,11,11,11,11,11,5,5],"n":["common","problems","problems_cn","Case","borrow","borrow_mut","from","input","into","is_valid","new","new_params","params","try_from","try_into","type_id","values","p000_0xx","p000_005","p000_006","p000_007","longest_palindrome","Algorithm","MATRIX","STACK","borrow","borrow_mut","from","into","try_from","try_into","type_id","zigzag_conversion","reverse_integer","p000_0xx","p000_005","p000_006","p000_007","longest_palindrome","Algorithm","MATRIX","STACK","borrow","borrow_mut","from","into","try_from","try_into","type_id","zigzag_conversion","reverse_integer"],"q":["leetcode_rust","","","leetcode_rust::common","","","","","","","","","","","","","","leetcode_rust::problems","leetcode_rust::problems::p000_0xx","","","leetcode_rust::problems::p000_0xx::p000_005","leetcode_rust::problems::p000_0xx::p000_006","","","","","","","","","","","leetcode_rust::problems::p000_0xx::p000_007","leetcode_rust::problems_cn","leetcode_rust::problems_cn::p000_0xx","","","leetcode_rust::problems_cn::p000_0xx::p000_005","leetcode_rust::problems_cn::p000_0xx::p000_006","","","","","","","","","","","leetcode_rust::problems_cn::p000_0xx::p000_007"],"d":["Common Contents","Solutions to LeetCode problems","适用于国内版力扣的问题解法","Test case wrapper struct","","","Returns the argument unchanged.","Input value of test case","Calls <code>U::from(self)</code>.","Check if solution output matches any expectations","Create new test case with no parameters","Create new test case with parameters","Optional parameters when executing test case","","","","Expected values of given input","Problems #000 - #099","Problem #5 <em>Longest Parlindrome Substring</em>","Problem #6 <em>ZigZag Conversion</em>","Problem #7 <em>Reverse Integer</em>","Find longest palindrome of a given string.","Enum choosing algorithm for the solution","Char 2D array","String stacks","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Get a ZigZag matrix using given string and column-first …","Reverse an integer (32-bit long) and check for overflow.","问题编号 #000 - #099","问题 #5《最长回文子串》","问题 #6《Z 字形变换》","问题 #7《整数反转》","最长回文子串","用于选择要执行的算法的 Enum","使用二维数组实现的字形变换","使用栈数组实现的字形变换","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Z 字形变换","32 位整型反转的同时检查溢出"],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,0,0],"f":[0,0,0,0,[[]],[[]],[[]],0,[[]],[1],[2,1],[[2,2],1],0,[[],3],[[],3],[[],4],0,0,0,0,0,[5,5],0,0,0,[[]],[[]],[[]],[[]],[[],3],[[],3],[[],4],[[5,6,[8,[7]]],5],[6,6],0,0,0,0,[5,5],0,0,0,[[]],[[]],[[]],[[]],[[],3],[[],3],[[],4],[[5,6,[8,[9]]],5],[6,6]],"p":[[3,"Case"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"String"],[15,"i32"],[4,"Algorithm"],[4,"Option"],[4,"Algorithm"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
