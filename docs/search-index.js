var searchIndex = JSON.parse('{\
"leetcode_rust":{"doc":"LeetCode Solutions in Rust","t":[0,0,14,0,0,0,14,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,0,3,3,11,11,11,11,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,13,13,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,13,13,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5],"n":["cases","cases_cn","codegen_case_create_impl","common","macros","models","new_case","new_case_param","problems","problems_cn","vec2d","c000_0xx","c000_005","c000_006","c000_007","c000_008","c000_009","c000_010","c000_011","c000_012","c000_013","c000_014","c000_015","c000_016","c000_017","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","c000_0xx","c000_005","c000_006","c000_007","c000_008","c000_009","c000_010","c000_011","c000_012","c000_013","c000_014","c000_015","c000_016","c000_017","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","use_cases","Case","CaseGroup","add","all","borrow","borrow","borrow_mut","borrow_mut","create","create","create","create","create","create","create_multi","create_multi","create_multi","create_multi","create_multi","create_multi","create_param","create_param","create_param","create_param","create_param","create_param","create_param_multi","create_param_multi","create_param_multi","create_param_multi","create_param_multi","create_param_multi","from","from","input","inputs","into","into","is_valid","label","new","new","new_multi","new_params","new_params_multi","params","try_from","try_from","try_into","try_into","type_id","type_id","values","case","TestCase","TestCaseGroup","borrow","borrow","borrow_mut","borrow_mut","cases","deserialize","deserialize","expectation","fmt","fmt","from","from","input","into","into","try_from","try_from","try_into","try_into","type_id","type_id","p000_0xx","p000_005","p000_006","p000_007","p000_008","p000_009","p000_010","p000_011","p000_012","p000_013","p000_014","p000_015","p000_016","p000_017","longest_palindrome","Algorithm","MATRIX","STACK","borrow","borrow_mut","from","into","try_from","try_into","type_id","zigzag_conversion","reverse_integer","my_atoi","is_palindrome","is_match","max_area","int_to_roman","roman_to_int","longest_common_prefix","algorithm_1","three_sum","three_sum_closest","letter_combinations","p000_0xx","p000_005","p000_006","p000_007","p000_008","p000_009","p000_010","p000_011","p000_012","p000_013","p000_014","p000_015","p000_016","p000_017","longest_palindrome","Algorithm","MATRIX","STACK","borrow","borrow_mut","from","into","try_from","try_into","type_id","zigzag_conversion","reverse_integer","my_atoi","is_palindrome","is_match","max_area","int_to_roman","roman_to_int","longest_common_prefix","three_sum","three_sum_closest","letter_combinations"],"q":["leetcode_rust","","","","","","","","","","","leetcode_rust::cases","leetcode_rust::cases::c000_0xx","","","","","","","","","","","","","leetcode_rust::cases::c000_0xx::c000_005","leetcode_rust::cases::c000_0xx::c000_006","leetcode_rust::cases::c000_0xx::c000_007","leetcode_rust::cases::c000_0xx::c000_008","leetcode_rust::cases::c000_0xx::c000_009","leetcode_rust::cases::c000_0xx::c000_010","leetcode_rust::cases::c000_0xx::c000_011","leetcode_rust::cases::c000_0xx::c000_012","leetcode_rust::cases::c000_0xx::c000_013","leetcode_rust::cases::c000_0xx::c000_014","leetcode_rust::cases::c000_0xx::c000_015","leetcode_rust::cases::c000_0xx::c000_016","leetcode_rust::cases::c000_0xx::c000_017","leetcode_rust::cases_cn","leetcode_rust::cases_cn::c000_0xx","","","","","","","","","","","","","leetcode_rust::cases_cn::c000_0xx::c000_005","leetcode_rust::cases_cn::c000_0xx::c000_006","leetcode_rust::cases_cn::c000_0xx::c000_007","leetcode_rust::cases_cn::c000_0xx::c000_008","leetcode_rust::cases_cn::c000_0xx::c000_009","leetcode_rust::cases_cn::c000_0xx::c000_010","leetcode_rust::cases_cn::c000_0xx::c000_011","leetcode_rust::cases_cn::c000_0xx::c000_012","leetcode_rust::cases_cn::c000_0xx::c000_013","leetcode_rust::cases_cn::c000_0xx::c000_014","leetcode_rust::cases_cn::c000_0xx::c000_015","leetcode_rust::cases_cn::c000_0xx::c000_016","leetcode_rust::cases_cn::c000_0xx::c000_017","leetcode_rust::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leetcode_rust::models","leetcode_rust::models::case","","","","","","","","","","","","","","","","","","","","","","","leetcode_rust::problems","leetcode_rust::problems::p000_0xx","","","","","","","","","","","","","leetcode_rust::problems::p000_0xx::p000_005","leetcode_rust::problems::p000_0xx::p000_006","","","","","","","","","","","leetcode_rust::problems::p000_0xx::p000_007","leetcode_rust::problems::p000_0xx::p000_008","leetcode_rust::problems::p000_0xx::p000_009","leetcode_rust::problems::p000_0xx::p000_010","leetcode_rust::problems::p000_0xx::p000_011","leetcode_rust::problems::p000_0xx::p000_012","leetcode_rust::problems::p000_0xx::p000_013","leetcode_rust::problems::p000_0xx::p000_014","leetcode_rust::problems::p000_0xx::p000_015","","leetcode_rust::problems::p000_0xx::p000_016","leetcode_rust::problems::p000_0xx::p000_017","leetcode_rust::problems_cn","leetcode_rust::problems_cn::p000_0xx","","","","","","","","","","","","","leetcode_rust::problems_cn::p000_0xx::p000_005","leetcode_rust::problems_cn::p000_0xx::p000_006","","","","","","","","","","","leetcode_rust::problems_cn::p000_0xx::p000_007","leetcode_rust::problems_cn::p000_0xx::p000_008","leetcode_rust::problems_cn::p000_0xx::p000_009","leetcode_rust::problems_cn::p000_0xx::p000_010","leetcode_rust::problems_cn::p000_0xx::p000_011","leetcode_rust::problems_cn::p000_0xx::p000_012","leetcode_rust::problems_cn::p000_0xx::p000_013","leetcode_rust::problems_cn::p000_0xx::p000_014","leetcode_rust::problems_cn::p000_0xx::p000_015","leetcode_rust::problems_cn::p000_0xx::p000_016","leetcode_rust::problems_cn::p000_0xx::p000_017"],"d":["Test case wrappers for LeetCode problems. You should find …","…","Generate <code>create</code> &amp; <code>create_param</code> implementation for …","Common Contents","A module defining several useful macros","Use models module defines several JSON based models for …","Helper macro to call <code>create</code> method of CaseGroup&lt;T, G, P&gt; …","Helper macro to call <code>create_param</code> method of CaseGroup&lt;T, …","Solutions to LeetCode problems","适用于国内版力扣的问题解法","Use a simplified syntax to create nested Vectors (as per …","Test cases for problems #1 to #99.","","","","","","","","","","","","","","","","","","","","","","","","","","","为问题 #1 到 #99 设计的测试用例","","","","","","","","","","","","","","","","","","","","","","","","","","","Test case wrapper struct","A easy to use test case collection struct that also …","Add existing test case instance to the collection.","Get all test cases within current test case collection.","","","","","Create a new test case (no input parameters) matching …","Create a new test case (no input parameters) matching &amp;str …","Create a new test case (no input parameters) matching …","Create a new test case (no input parameters) matching …","Create a new test case (no input parameters) matching …","Create a new test case (no input parameters) matching …","Create a new test case (no input parameters but …","Create a new test case (no input parameters but …","Create a new test case (no input parameters but …","Create a new test case (no input parameters but multiple …","Create a new test case (no input parameters but …","Create a new test case (no input parameters but …","Create a new test case (with input parameters) matching …","Create a new test case (with input parameters) matching …","Create a new test case (with input parameters) matching …","Create a new test case (with input parameters) matching …","Create a new test case (with input parameters) matching …","Create a new test case (with input parameters) matching …","Create a new test case (with input parameters and …","Create a new test case (with input parameters and …","Create a new test case (with input parameters and …","Create a new test case (with input parameters and …","Create a new test case (with input parameters and multiple …","Create a new test case (with input parameters and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the first element of inputs","Input values of test case","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if solution output matches any expectations","Returns the index value in String form.","Create new test case with no parameters","Create a new CaseGroup instance.","Create new test case with no parameters but multiple inputs","Create new test case with parameters","Create new test case with parameters and multi input","Optional parameters when executing test case","","","","","","","Expected values of given input","Test case models","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Problems #000 - #099","Problem #5 <em>Longest Parlindrome Substring</em>","Problem #6 <em>ZigZag Conversion</em>","Problem #7 <em>Reverse Integer</em>","Problem #8 <em>String to Integer (atoi)</em>","Problem #9 <em>Palindrome Number</em>","Problem #10 <em>Regular Expression Matching</em>","Problem #11 <em>Container With Most Water</em>","Problem #12 <em>Integer to Roman</em>","Problem #13 <em>Roman to Integer</em>","Problem #14 <em>Longest Common Prefix</em>","Problem #15 <em>3Sum</em>","Problem #16 <em>3Sum Closest</em>","Problem #17 <em>Letter Combinations of a Phone Number</em>","Find longest palindrome of a given string.","Enum choosing algorithm for the solution","Char 2D array","String stacks","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Get a ZigZag matrix using given string and column-first …","Reverse an integer (32-bit long) and check for overflow.","Convert string to 32-bit integer","Check if a given input is a palindrome number","Simplified regular expression match algorithm","Container With Most Water","Integer to Roman","Integer to Roman","Longest Common Prefix","Sample algorithm implementation from LeetCode (fastest)","3Sum","3Sum Closest","Letter Combinations of a Phone Number","问题编号 #000 - #099","问题 #5《最长回文子串》","问题 #6《Z 字形变换》","问题 #7《整数反转》","问题 #8《字符串转换整数 (atoi)》","问题 #9《回文数》","问题 #10《正则表达式匹配》","问题 #11《盛最多水的容器》","问题 #12《整数转罗马数字》","问题 #13《罗马数字转整数》","问题 #14《最长公共前缀》","问题 #15《三数之和》","问题 #16《最接近的三数之和》","问题 #17《电话号码的字母组合》","最长回文子串","用于选择要执行的算法的 Enum","使用二维数组实现的字形变换","使用栈数组实现的字形变换","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Z 字形变换","32 位整型反转的同时检查溢出","字符串转换为 32 位整型数","检查传入参数是不是一个回文数","简化版的正则表达式匹配算法","盛最多水的容器","整数转罗马数字","罗马数字转整数","最长公共前缀","三数之和","最接近的三数之和","电话号码的字母组合"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,3,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,6,3,3,3,6,3,3,3,6,3,3,3,3,3,6,3,6,3,6,3,0,0,0,10,11,10,11,10,10,11,11,10,11,10,11,11,10,11,10,11,10,11,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[4,[[3,[1,1,2]]]]]],[[],[[4,[[3,[1,1,2]]]]]],[[],[[4,[[3,[2,2,2]]]]]],[[],[[4,[[3,[1,2,2]]]]]],[[],[[4,[[3,[2,5,2]]]]]],[[],[[4,[[3,[1,5,2]]]]]],[[],[[4,[[3,[2,2,2]]]]]],[[],[[4,[[3,[2,1,2]]]]]],[[],[[4,[[3,[1,2,2]]]]]],[[],[[4,[[3,[1,1,2]]]]]],[[],[[4,[[3,[[4,[2]],[4,[[4,[2]]]],2]]]]]],[[],[[4,[[3,[2,2,2]]]]]],[[],[[4,[[3,[1,[4,[1]],2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[4,[[3,[1,1,2]]]]]],[[],[[4,[[3,[1,1,2]]]]]],[[],[[4,[[3,[2,2,2]]]]]],[[],[[4,[[3,[1,2,2]]]]]],[[],[[4,[[3,[2,5,2]]]]]],[[],[[4,[[3,[1,5,2]]]]]],[[],[[4,[[3,[2,2,2]]]]]],[[],[[4,[[3,[2,1,2]]]]]],[[],[[4,[[3,[1,2,2]]]]]],[[],[[4,[[3,[1,1,2]]]]]],[[],[[4,[[3,[[4,[2]],[4,[[4,[2]]]],2]]]]]],[[],[[4,[[3,[2,2,2]]]]]],[[],[[4,[[3,[1,[4,[1]],2]]]]]],0,0,[[6,3]],[6,[[4,[3]]]],[[]],[[]],[[]],[[]],[[[6,[[4,[2]],2,2]],[4,[2]],[4,[2]]]],[[[6,[1]],7,4]],[[[6,[2,1,2]],2,[4,[1]]]],[[[6,[[4,[2]],[4,[[4,[2]]]],2]],[4,[2]],[4,[[4,[[4,[2]]]]]]]],[[[6,[2,5,2]],2,[4,[5]]]],[[[6,[2,2,2]],2,[4,[2]]]],[[[6,[2,5,2]],[4,[2]],[4,[5]]]],[[[6,[[4,[2]],[4,[[4,[2]]]],2]],[4,[[4,[2]]]],[4,[[4,[[4,[2]]]]]]]],[[[6,[2,1,2]],[4,[2]],[4,[1]]]],[[[6,[1]],[4,[7]],4]],[[[6,[[4,[2]],2,2]],[4,[[4,[2]]]],[4,[2]]]],[[[6,[2,2,2]],[4,[2]],[4,[2]]]],[[[6,[1]],7,4,4]],[[[6,[2,5,2]],2,[4,[5]],[4,[2]]]],[[[6,[2,2,2]],2,[4,[2]],[4,[2]]]],[[[6,[[4,[2]],2,2]],[4,[2]],[4,[2]],[4,[2]]]],[[[6,[[4,[2]],[4,[[4,[2]]]],2]],[4,[2]],[4,[[4,[[4,[2]]]]]],[4,[2]]]],[[[6,[2,1,2]],2,[4,[1]],[4,[2]]]],[[[6,[2,5,2]],[4,[2]],[4,[5]],[4,[2]]]],[[[6,[[4,[2]],[4,[[4,[2]]]],2]],[4,[[4,[2]]]],[4,[[4,[[4,[2]]]]]],[4,[2]]]],[[[6,[2,2,2]],[4,[2]],[4,[2]],[4,[2]]]],[[[6,[[4,[2]],2,2]],[4,[[4,[2]]]],[4,[2]],[4,[2]]]],[[[6,[1]],[4,[7]],4,4]],[[[6,[2,1,2]],[4,[2]],[4,[1]],[4,[2]]]],[[]],[[]],[3],0,[[]],[[]],[3],[3,1],[4,3],[[],6],[[4,4],3],[[4,4],3],[[4,4,4],3],0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,[[]],[[]],[[]],[[]],0,[[],[[8,[10]]]],[[],[[8,[11]]]],0,[[[10,[12,12]],13],14],[[[11,[12,12]],13],14],[[]],[[]],0,[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],0,0,0,[[]],[[]],[[]],[[]],[[],8],[[],8],[[],9],[[1,2,[16,[15]]],1],[2,2],[1,2],[2,5],[[1,1],5],[[[4,[2]]],2],[2,1],[1,2],[[[4,[1]]],1],[[[4,[2]]],[[4,[[4,[2]]]]]],[[[4,[2]]],[[4,[[4,[2]]]]]],[[[4,[2]],2],2],[1,[[4,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],0,0,0,[[]],[[]],[[]],[[]],[[],8],[[],8],[[],9],[[1,2,[16,[17]]],1],[2,2],[1,2],[2,5],[[1,1],5],[[[4,[2]]],2],[2,1],[1,2],[[[4,[1]]],1],[[[4,[2]]],[[4,[[4,[2]]]]]],[[[4,[2]],2],2],[1,[[4,[1]]]]],"p":[[3,"String"],[15,"i32"],[3,"Case"],[3,"Vec"],[15,"bool"],[3,"CaseGroup"],[15,"str"],[4,"Result"],[3,"TypeId"],[3,"TestCaseGroup"],[3,"TestCase"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Algorithm"],[4,"Option"],[4,"Algorithm"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
