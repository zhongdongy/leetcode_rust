var searchIndex = JSON.parse('{\
"leetcode_rust":{"doc":"LeetCode Solutions in Rust","t":[14,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,0,0,0,0,0,5,4,13,13,11,11,11,11,11,11,11,5,5,5,0,0,0,0,5,4,13,13,11,11,11,11,11,11,11,5,5],"n":["codegen_case_create_impl","common","problems","problems_cn","Case","CaseGroup","add","all","borrow","borrow","borrow_mut","borrow_mut","create","create","create_param","create_param","from","from","input","into","into","is_valid","label","new","new","new_params","params","try_from","try_from","try_into","try_into","type_id","type_id","values","p000_0xx","p000_005","p000_006","p000_007","p000_008","longest_palindrome","Algorithm","MATRIX","STACK","borrow","borrow_mut","from","into","try_from","try_into","type_id","zigzag_conversion","reverse_integer","my_atoi","p000_0xx","p000_005","p000_006","p000_007","longest_palindrome","Algorithm","MATRIX","STACK","borrow","borrow_mut","from","into","try_from","try_into","type_id","zigzag_conversion","reverse_integer"],"q":["leetcode_rust","","","","leetcode_rust::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","leetcode_rust::problems","leetcode_rust::problems::p000_0xx","","","","leetcode_rust::problems::p000_0xx::p000_005","leetcode_rust::problems::p000_0xx::p000_006","","","","","","","","","","","leetcode_rust::problems::p000_0xx::p000_007","leetcode_rust::problems::p000_0xx::p000_008","leetcode_rust::problems_cn","leetcode_rust::problems_cn::p000_0xx","","","leetcode_rust::problems_cn::p000_0xx::p000_005","leetcode_rust::problems_cn::p000_0xx::p000_006","","","","","","","","","","","leetcode_rust::problems_cn::p000_0xx::p000_007"],"d":["Generate <code>create</code> &amp; <code>create_param</code> implementation for …","Common Contents","Solutions to LeetCode problems","适用于国内版力扣的问题解法","Test case wrapper struct","A easy to use test case collection struct that also …","Add existing test case instance to the collection.","Get all test cases within current test case collection.","","","","","Create a new test case (mo input parameters) matching &amp;str …","Create a new test case (no input parameters) matching …","Create a new test case (with input parameters) matching …","Create a new test case (with input parameters) matching …","Returns the argument unchanged.","Returns the argument unchanged.","Input value of test case","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if solution output matches any expectations","Returns the index value in String form.","Create new test case with no parameters","Create a new CaseGroup instance.","Create new test case with parameters","Optional parameters when executing test case","","","","","","","Expected values of given input","Problems #000 - #099","Problem #5 <em>Longest Parlindrome Substring</em>","Problem #6 <em>ZigZag Conversion</em>","Problem #7 <em>Reverse Integer</em>","Problem #8 <em>String to Integer (atoi)</em>","Find longest palindrome of a given string.","Enum choosing algorithm for the solution","Char 2D array","String stacks","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Get a ZigZag matrix using given string and column-first …","Reverse an integer (32-bit long) and check for overflow.","Convert string to 32-bit integer","问题编号 #000 - #099","问题 #5《最长回文子串》","问题 #6《Z 字形变换》","问题 #7《整数反转》","最长回文子串","用于选择要执行的算法的 Enum","使用二维数组实现的字形变换","使用栈数组实现的字形变换","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Z 字形变换","32 位整型反转的同时检查溢出"],"i":[0,0,0,0,0,0,1,1,2,1,2,1,1,1,1,1,2,1,2,2,1,2,2,2,1,2,2,2,1,2,1,2,1,2,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,0,0],"f":[0,0,0,0,0,0,[[1,2]],[1,[[3,[2]]]],[[]],[[]],[[]],[[]],[[[1,[4]],5,3]],[[[1,[6,6,6]],6,[3,[6]]]],[[[1,[4]],5,3,3]],[[[1,[6,6,6]],6,[3,[6]],[3,[6]]]],[[]],[[]],0,[[]],[[]],[2],[2,4],[3,2],[[],1],[[3,3],2],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,[4,4],0,0,0,[[]],[[]],[[]],[[]],[[],7],[[],7],[[],8],[[4,6,[10,[9]]],4],[6,6],[4,6],0,0,0,0,[4,4],0,0,0,[[]],[[]],[[]],[[]],[[],7],[[],7],[[],8],[[4,6,[10,[11]]],4],[6,6]],"p":[[3,"CaseGroup"],[3,"Case"],[3,"Vec"],[3,"String"],[15,"str"],[15,"i32"],[4,"Result"],[3,"TypeId"],[4,"Algorithm"],[4,"Option"],[4,"Algorithm"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
